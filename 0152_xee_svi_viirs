# -*- coding: utf-8 -*-
"""GEE_0072_svi.ipynb


Tutorial Code by Amirhossein Ahrari
YouTube: https://www.youtube.com/@amirhosseinahrarigee
Tutorial Video: Google Earth Engine Tutorial-157: Standardized Vegetation Index (SVI) using Python API (Xee)

This code is part of a tutorial series on Earth Engine programming techniques
presented on the Amirhossein Ahrari YouTube channel. You are free to use and modify
this code for academic and non-academic purposes. Don't forget to subscribe to
the Amirhossein Ahrari channel and follow the videos to support the instructor



"""

import ee
import geemap
!pip install xee
import xee
import xarray as xr

ee.Authenticate()
ee.Initialize(
    project = 'ee-amirhosseinahrari',
    opt_url = 'https://earthengine-highvolume.googleapis.com'
)

map = geemap.Map(basemap = 'SATELLITE')
map

point = map.draw_last_feature.geometry()
point

roi = ee.FeatureCollection("FAO/GAUL/2015/level1").filterBounds(point).geometry().simplify(1000)
map.addLayer(roi, {}, 'roi')

evi = (
    ee.ImageCollection("NASA/VIIRS/002/VNP13A1")
    .filterDate('2015','2025')
    .select('EVI')
    .map(lambda x: x.clip(roi).copyProperties(x, ['system:time_start']))
)

evi

ds = xr.open_dataset(
    evi,
    engine = 'ee',
    crs = 'EPSG:4326',
    geometry = roi,
    scale = 0.01
)

ds = ds.sortby('time') * 1

ds_mean = ds.mean(dim = 'time')
ds_std = ds.std(dim = 'time')
svi = (ds - ds_mean) / ds_std

svi_annual = svi.resample(time = 'Y').mean('time')

import matplotlib.pyplot as plt

svi_annual.EVI.plot(
    x = 'lon',
    y = 'lat',
    col = 'time',
    col_wrap = 5,
    cmap = 'turbo_r',
    robust = True
)

plt.savefig('svi_annual.png', dpi = 360, bbox_inches = 'tight')

!pip install netCDF4
import netCDF4

svi_annual.to_netcdf('svi_annual_array.nc')

svi_annual_mean = svi_annual.mean(dim = ['lon', 'lat'])
svi_annual_df = svi_annual_mean.to_dataframe().dropna()
svi_annual_df.to_csv('svi_annual.csv')

svi_annual_df.plot()

svi_mean = svi.mean(dim = ['lon', 'lat'])
svi_mean_df = svi_mean.to_dataframe().dropna()
svi_mean_df.to_csv('svi_16days.csv')

svi_mean_df.plot()
