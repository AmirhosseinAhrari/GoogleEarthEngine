# -*- coding: utf-8 -*-
"""GEE_0077_GRACE_Drought_Index.ipynb

Tutorial Code by Amirhossein Ahrari
YouTube: https://www.youtube.com/@amirhosseinahrarigee
Tutorial Video: Google Earth Engine Tutorial-159: GRACE Drought Index using Python API (Xee)

This code is part of a tutorial series on Earth Engine programming techniques
presented on the Amirhossein Ahrari YouTube channel. You are free to use and modify
this code for academic and non-academic purposes. Don't forget to subscribe to
the Amirhossein Ahrari channel and follow the videos to support the instructor




"""

import ee
import geemap
!pip install xee
import xee
import xarray as xr
import numpy as np

ee.Authenticate()
ee.Initialize(
    project = 'ee-amirhosseinahrari',
    opt_url = 'https://earthengine-highvolume.googleapis.com'
)

map = geemap.Map(basemap = 'TERRAIN')
map

point = map.draw_last_feature.geometry()

iran = (
    ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017")
    .filterBounds(point)
    .geometry()
    .simplify(1000)
)

map.addLayer(iran, {}, 'Iran')

grace = (
    ee.ImageCollection("NASA/GRACE/MASS_GRIDS_V04/MASCON_CRI")
    .filterDate('2003', '2025')
    .select('lwe_thickness')
    .map(lambda img: img.clip(iran).copyProperties(img, img.propertyNames()))
)

grace

ds = xr.open_dataset(
    grace,
    engine = 'ee',
    crs = 'EPSG:4326',
    scale = 1,
    geometry = iran
)

ds = ds.sortby('time') * 1

ds_mean = ds.mean(dim = 'time')
ds_std = ds.std(dim = 'time')
gdsi = (ds - ds_mean) / ds_std

def classify(val):
  if val >= 2.0: return 1
  elif val >= 1.6: return 2
  elif val >= 1.3: return 3
  elif val >= 0.8: return 4
  elif val >= 0.5: return 5
  elif val >= -0.5: return 6
  elif val >= -0.8: return 7
  elif val >= -1.3: return 8
  elif val >= -1.6: return 9
  elif val >= -2.0: return 10
  else: return 0

drought = xr.apply_ufunc(
    np.vectorize(classify),
    gdsi,
    dask = 'allowed'
)

drought = xr.where((drought == 0), np.nan, drought)

drought_annual = drought.resample(time = 'Y').median('time')

import matplotlib.pyplot as plt

drought_annual.lwe_thickness.plot.contourf(
    x = 'lon',
    y = 'lat',
    col = 'time',
    col_wrap = 8,
    cmap = 'turbo',
    levels = 20
)

plt.savefig('annual_drought.png', dpi = 360, bbox_inches = 'tight')
