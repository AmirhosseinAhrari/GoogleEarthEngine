/*
Tutorial Code by Amirhossein Ahrari
YouTube: https://www.youtube.com/@amirhosseinahrarigee

This code is part of a tutorial series on Earth Engine programming techniques
presented on the Amirhossein Ahrari YouTube channel. You are free to use and modify
this code for academic and non-academic purposes. Don't forget to subscribe to
the Amirhossein Ahrari channel and follow the videos to support the instructor!
*/



var cor = [[51.09050885517992,35.57496936569026],
           [51.58214703877367,35.57496936569026],
           [51.58214703877367,35.85149920592443],
           [51.09050885517992,35.85149920592443],
           [51.09050885517992,35.57496936569026]]

var geometry = ee.Geometry.Polygon(cor)

var table = ee.FeatureCollection("FAO/GAUL/2015/level1")

var roi = table.filterBounds(geometry).map(function(feature){
  return feature.simplify(500)
  });

Map.centerObject(roi)
Map.addLayer(roi)

var time_start = '2019', time_end = '2024'

var co = ee.ImageCollection("COPERNICUS/S5P/NRTI/L3_CO")
.select(['CO_column_number_density'],['CO'])
.filterDate(time_start, time_end)
.filterBounds(roi)

var years_list = ee.List.sequence(ee.Number.parse(time_start), ee.Number.parse(time_end).subtract(1))
var months_list = ee.List.sequence(1, 12)

var co_monthly = ee.ImageCollection(years_list.map(function(year){
  return months_list.map(function(month){
    var image = co.filter(ee.Filter.calendarRange(year, year, 'year'))
                  .filter(ee.Filter.calendarRange(month, month, 'month')).mean();
    var date = ee.Date.fromYMD(year, month, 1)
    return image
    .set('system:time_start', date.millis())
    })
  }).flatten())
  
Map.addLayer(co_monthly.mean().clip(roi), [], 'co_mean', false)


print(
  ui.Chart.image.series(co_monthly, geometry, ee.Reducer.mean(), 7000, 'system:time_start')
  .setOptions({
    title: 'Carbon Monoxide', 
    vAxis: {title: 'mol/m2'},
    hAxis: {title: 'date'},
    series: {0:{color:'red'}},
    pointSize: 4
    })
  )

var light = ee.ImageCollection("NOAA/VIIRS/DNB/MONTHLY_V1/VCMCFG").select('avg_rad')
.filterDate(time_start, time_end)
.filter(ee.Filter.calendarRange(6,7,'month').not())

Map.addLayer(light.mean().clip(roi), [], 'light_mean', false)

print(
  ui.Chart.image.series(light, geometry, ee.Reducer.mean(), 500, 'system:time_start')
    .setOptions({
    title: 'Electricity Consumption', 
    vAxis: {title: 'Rad'},
    hAxis: {title: 'date'},
    series: {0:{color:'orange'}},
    pointSize: 4
    })
  )


