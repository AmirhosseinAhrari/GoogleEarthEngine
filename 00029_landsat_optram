
/*
Tutorial Code by Amirhossein Ahrari
YouTube: https://www.youtube.com/@amirhosseinahrarigee

This code is part of a tutorial series on Earth Engine programming techniques
presented on the Amirhossein Ahrari YouTube channel. You are free to use and modify
this code for academic and non-academic purposes. Don't forget to subscribe to
the Amirhossein Ahrari channel and follow the videos to support the instructor!
*/

var cor = [
  [47.808901137191114,31.621192173639276],
  [49.259096449691114,31.621192173639276],
  [49.259096449691114,32.70003070644645],
  [47.808901137191114,32.70003070644645],
  [47.808901137191114,31.621192173639276]
  ]

var roi = ee.Geometry.Polygon(cor)

Map.centerObject(roi);

// landsat collection data

var landsat = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
.filterBounds(roi)
.filterDate('2020','2022')
.filter(ee.Filter.lt('CLOUD_COVER',10))
.filter(ee.Filter.eq('WRS_PATH', 165))
.filter(ee.Filter.eq('WRS_ROW', 38));

var parameters = landsat.map(function(img){
  var ms = img.select('SR_B.*').multiply(0.0000275).add(-0.2);
  var ndvi = ms.normalizedDifference(['SR_B5','SR_B4']).rename('ndvi');
  var lst = img.select('ST_B10').multiply(0.00341802).add(149).rename('lst');
  return ee.Image.cat(ndvi, lst)
  .copyProperties(img, img.propertyNames())
  });

var lst_full_cover = parameters.map(function(img){
  var ndvi_full = img.select('ndvi').gt(0.3);
  var lst_full = img.select('lst').updateMask(ndvi_full)
  return lst_full
  .copyProperties(img, img.propertyNames())
  })
  
var lst_bareland = parameters.map(function(img){
  var ndvi_bareland = img.select('ndvi').gte(0).and(img.select('ndvi').lt(0.2));
  var lst_bareland = img.select('lst').updateMask(ndvi_bareland);
  return lst_bareland
  .copyProperties(img, img.propertyNames())
  });
  
var vw = ee.Number(lst_full_cover.min().reduceRegion({
  reducer: ee.Reducer.min(), geometry: roi, scale: 100
  }).values().get(0))
  
var vd = ee.Number(lst_full_cover.max().reduceRegion({
  reducer: ee.Reducer.max(), geometry: roi, scale: 100
  }).values().get(0))
  
var iw = ee.Number(lst_bareland.min().reduceRegion({
  reducer: ee.Reducer.min(), geometry: roi, scale: 100
  }).values().get(0))
  
var id = ee.Number(lst_bareland.max().reduceRegion({
  reducer: ee.Reducer.max(), geometry: roi, scale: 100
  }).values().get(0));
  
var sd = id.subtract(vd);
var sw = iw.subtract(vw);

var sm = parameters.map(function(img){
  var eq = img.expression('(id + sd * ndvi - lst)/(id - iw + (sd - sw) * ndvi)',{
    'id': id, 'sd': sd, 'ndvi': img.select('ndvi'), 'lst': img.select('lst'), 'iw': iw, 'sw': sw
    }).rename('soil_moisture');
  return eq
  .copyProperties(img, img.propertyNames())
  });
  
print(
  ui.Chart.image.series(sm, roi, ee.Reducer.mean(), 100, 'system:time_start')
  )

var lc = ee.ImageCollection("GOOGLE/DYNAMICWORLD/V1").select('label')
.filterBounds(roi)
.mode();

var mask = lc.eq(0).or(lc.eq(6)).not()


Map.addLayer(mask.clip(roi),[],'mask',false)


var sm_masked = sm.toBands().updateMask(mask);


Map.addLayer(sm_masked.clip(roi),[],'sm_masked',false)

Export.image.toDrive({
  image: sm_masked.clip(roi).float(), 
  description: 'soil_moisture', 
  scale: 30, 
  region: roi, 
  crs: 
  
  sm_masked.getInfo().crs,
  maxPixels: 1e13,
  folder: 'soil_moisture'
  })
