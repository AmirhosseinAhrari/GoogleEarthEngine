# -*- coding: utf-8 -*-
"""GEE_0015_water_consumption.ipynb

utorial Code by Amirhossein Ahrari
YouTube: https://www.youtube.com/@amirhosseinahrarigee
Tutorial Video: Google Earth Engine Tutorial-112: Vegetation Water Consumption, using Python API (Xee)

This code is part of a tutorial series on Earth Engine programming techniques
presented on the Amirhossein Ahrari YouTube channel. You are free to use and modify
this code for academic and non-academic purposes. Don't forget to subscribe to
the Amirhossein Ahrari channel and follow the videos to support the instructor

"""

import ee
import geemap as gee
import xarray as xr

!pip install xee
import xee

ee.Authenticate()
ee.Initialize( project = 'ee-amirhosseinahrari', opt_url = 'https://earthengine-highvolume.googleapis.com')

ndvi = ee.ImageCollection("MODIS/061/MOD13A2").select('NDVI').filterDate('2019', '2020')

ndvi_max = ndvi.max().multiply(0.0001)
ndvi_thr = ndvi_max.gt(0.5).selfMask()
ndvi_pix_area = ndvi_thr.multiply(ee.Image.pixelArea())
veg_area = ndvi_pix_area.reduceRegion(reducer = ee.Reducer.sum(), geometry =geometry, scale = 1000).values().get(0)
veg_area.getInfo()

map = gee.Map(basemap = 'HYBRID')
map

geometry = map.draw_last_feature.geometry()

ds_ndvi = xr.open_dataset(ndvi, engine = 'ee', crs = 'EPSG:4326', scale = 0.01, geometry = geometry)

ds_ndvi

ds_ndvi_max = ds_ndvi.max(dim = 'time') * 0.0001

ds_ndvi_max.NDVI.plot( x = 'lon', y = 'lat', cmap = 'Greens', robust = True)

ds_ndvi_thr = ds_ndvi_max.NDVI > 0.5

ds_ndvi_thr.plot(x = 'lon', y = 'lat')

"""https://gee-community-catalog.org/projects/usgs_modis_et/"""

et = ee.ImageCollection('projects/earthengine-legacy/assets/projects/usgs-ssebop/modis_et_v5_monthly').filterDate('2019','2020')

ds_et = xr.open_dataset(et, engine = 'ee', scale = 0.01, crs = 'EPSG:4326', geometry = geometry)

ds_et

ds_et.et.plot(x = 'lon', y ='lat', cmap = 'gist_earth_r', col = 'time', col_wrap = 4, robust = True)

et_mask = ds_et * ds_ndvi_thr

et_mask.et.plot(x = 'lon', y = 'lat', cmap = 'gist_earth_r', col = 'time', col_wrap = 4, robust = True)

et_mean = et_mask.mean(dim = ['lon', 'lat'])
et_mean

et_mean_val = et_mean.et.values
et_mean_val

# water consumption (m3) = aet (mm) * veg_area (m2)
wat_cons = 7834196440.9002495 * et_mean_val
wat_cons
