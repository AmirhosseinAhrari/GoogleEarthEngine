

/*
Tutorial Code by Amirhossein Ahrari
YouTube: https://www.youtube.com/@amirhosseinahrarigee

This code is part of a tutorial series on Earth Engine programming techniques
presented on the Amirhossein Ahrari YouTube channel. You are free to use and modify
this code for academic and non-academic purposes. Don't forget to subscribe to
the Amirhossein Ahrari channel and follow the videos to support the instructor!
*/

var cor = [
  [-113.91747728301502,42.51719145332193],
  [-113.47939744903064,42.51719145332193],
  [-113.47939744903064,42.825155066387374],
  [-113.91747728301502,42.825155066387374],
  [-113.91747728301502,42.51719145332193]
  ]

var geometry = ee.Geometry.Polygon(cor)


Map.centerObject(geometry)

var time_start =  ee.Date('2023')
var time_end = ee.Date('2024')
var time_dif = time_end.difference(time_start, 'day')
var interval = 8

var landsat = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2").merge(ee.ImageCollection("LANDSAT/LC09/C02/T1_L2"))
              .sort('system:time_start')
              .filterDate(time_start, time_end)
              .filterBounds(geometry)
              //.filter(ee.Filter.lt('CLOUD_COVER',10));

var index = landsat.map(function(img){
  var bands = img.select('SR_B.*').multiply(2.75e-05).add(-0.2)
  var ndvi = bands.normalizedDifference(['SR_B5','SR_B4']).rename('ndvi')
  var evi = bands.expression('2.5 * ((nir - red) / (nir + 6 * red - 7.5 * blue + 1))', {
    'nir': bands.select('SR_B5'), 'red': bands.select('SR_B4'), 'blue': bands.select('SR_B2')
    }).rename('evi');
  var lai = evi.expression('3.618 * evi - 0.118', {'evi': evi.select('evi')}).rename('lai')
  return ndvi.addBands(evi).addBands(lai)
  .copyProperties(img, ['system:time_start','system:time_end'])
  })

print(index)

Map.addLayer(index.limit(20).toBands().clip(geometry),[],'lai',false)


var list = ee.List.sequence(0, time_dif.subtract(1), interval).map(function(numbers){
  return ee.Date.fromYMD(2023, 1, 1).advance(numbers, 'days')})


var mosaic = ee.ImageCollection(list.map(function(date){
  var start_date = ee.Date(date)
  var end_date = start_date.advance(interval, 'days')
  var img = index.filterDate(start_date, end_date).max()
  var band_size = img.bandNames().size()
  return img
  .set('system:time_start', start_date.millis())
  .set('system:time_end', end_date.millis())
  .set('system:index', start_date.format('YYYY-MM-dd')) 
  .set('band_size', band_size)
  })).filter(ee.Filter.gt('band_size',0))

print(mosaic)

Map.addLayer(mosaic.select('lai').toBands().clip(geometry), [], 'LAI', false);


var cor2 = [-113.77877489043689,42.726596880716905]

var geometry2 = ee.Geometry.Point(cor2)


print(
  ui.Chart.image.series(mosaic.select('lai').filter(ee.Filter.calendarRange(5, 10, 'month'))
  , geometry2, ee.Reducer.first(), 30, 'system:time_start')
  )

print(
  ui.Chart.image.series(mosaic.select('ndvi').filter(ee.Filter.calendarRange(5, 10, 'month'))
  , geometry2, ee.Reducer.first(), 30, 'system:time_start')
  )


Export.image.toDrive({
  image: mosaic.select('lai').filter(ee.Filter.calendarRange(5, 10, 'month')).toBands(), 
  description: 'lai', 
  scale: 100, 
  region: geometry2, 
  crs: 'EPSG:4326', 
  folder: 'test', 
  maxPixels: 1e13
  
  })

